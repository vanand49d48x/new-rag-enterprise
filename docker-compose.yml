
services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./data/temp:/tmp  # For temporary file processing
      - ./data/logs:/app/logs
      - ./data/uploads:/app/uploads  # Uploads directory
      - ./data/processed:/app/processed  # Processed files directory
    environment:
      - PYTHONPATH=/app
      - LLM_BACKEND=llama_cpp
      - LLM_STRICT_MODE=true
      - PYTHONUNBUFFERED=1
      - LLM_API_URL=http://llama-cpp:8080/completion
      - HOST_RAM_GB=${HOST_RAM_GB}
      - HOST_CPU_COUNT=${HOST_CPU_COUNT}
      - MODEL_NAME=${MODEL_NAME}
      - CTX_SIZE=${CTX_SIZE}
      - THREADS=${THREADS}
      - BATCH_SIZE=${BATCH_SIZE}
      - GPU_LAYERS=${GPU_LAYERS}
      - N_PREDICT=${N_PREDICT}
      - REPEAT_PENALTY=${REPEAT_PENALTY}
      - TEMP=${TEMP}
      - TOP_P=${TOP_P}
      - TOP_K=${TOP_K}
      - UPLOAD_DIR=/app/uploads
      - PROCESSED_DIR=/app/processed
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6334
    depends_on:
      - qdrant
      - llama-cpp
      - tusd
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  llama-cpp:
    image: ${LLAMA_IMAGE:-ghcr.io/ggerganov/llama.cpp:server}
    platform: linux/amd64  # Force AMD64 for llama-cpp
    ports:
      - "8080:8080"
    volumes:
      - ./models:/models
    environment:
      - MODEL_NAME=${MODEL_NAME}
    command: >
      --model /models/${MODEL_NAME}
      --host 0.0.0.0
      --port 8080
      --ctx-size ${CTX_SIZE}
      --threads ${THREADS}
      --n-gpu-layers ${GPU_LAYERS}
      --batch-size ${BATCH_SIZE}
      --n-predict ${N_PREDICT}
      --repeat-penalty ${REPEAT_PENALTY}
      --temp ${TEMP}
      --top-p ${TOP_P}
      --top-k ${TOP_K}
    tty: true
    restart: unless-stopped
    # GPU configuration removed for CPU-only deployment
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/models"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  qdrant:
    image: qdrant/qdrant:latest
    platform: linux/amd64  # Force AMD64 for Qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # HTTP API
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6334
      - QDRANT__SERVICE__GRPC_PORT=6333
    restart: unless-stopped
    # Removed memory limits to allow full host resource access

  # Optional: Add monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    platform: linux/amd64  # Force AMD64 for Prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Optional: Add Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    platform: linux/amd64  # Force AMD64 for Grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
    restart: unless-stopped

  # tusd service for chunked file uploads
  tusd:
    image: tusproject/tusd:latest
    platform: linux/amd64
    ports:
      - "1080:1080"
    volumes:
      - ./data/uploads:/data
    environment:
      - TUSD_DATA_DIR=/data
    command: ["-upload-dir", "/data", "-host", "0.0.0.0", "-port", "1080", "-hooks-http", "http://backend:8000/enhanced-upload/tus-hooks"]
    restart: unless-stopped
    user: "1000:1000"
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:1080/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  qdrant_data:
  prometheus_data:
  grafana_data:
